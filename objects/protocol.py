from dataclasses import dataclass, field
from typing import List, Tuple, Any, Dict, ClassVar, Set
from pathlib import Path
import os
import json
import numpy as np
from lys.utils.paths import lys_data_dir, check_file_exists

#TODO: check how slow it would be to just read the file every time, if too slow: think about caching but... seems unlikely?

@dataclass(frozen=True)
class Protocol:
    """
    Represents a neuro experiment protocol as an ordered list of (t_start, t_end, label) tuples.

    Respects OCP: we can add a from_whatever constructor for our future formats.
    """
    intervals: List[Tuple[float, float, str]] = field(default_factory=list)

    @property
    def tasks(self) -> Set[str]:
        """
        Returns the set of unique task labels in the protocol.
        """
        return set([interval[2] for interval in self.intervals])

    @classmethod
    def from_dict(cls, protocol_dict: Dict[str, List[Tuple[float, float]]]) -> 'Protocol':
        """
        Construct a Protocol from a dictionary mapping labels to lists of (t_start, t_end) tuples.

        Example:
            {
                "MT": [(10.0, 20.0), (59.7, 64.7)],
                "SN": [(15.0, 25.0)]
            }

        The resulting intervals are sorted by t_start.
        """
        intervals = [
            (start, end, label)
            for label, intervals_list in protocol_dict.items()
            for (start, end) in intervals_list
        ]
        intervals.sort(key=lambda x: x[0])
        return cls(intervals=intervals)

    @classmethod
    def from_perceived_speech_log(cls, log_path: Path) -> 'Protocol':
        """
        Construct a Protocol from a .jsonl log file generated by PerceivedSpeechTaskExecutor.
        Each line in the file is a JSON object representing an event. This method extracts
        'perceived_word' events and creates intervals from them.

        The intervals are labeled with the 'word' field. The start and end times are in
        seconds, relative to the timestamp of the first event in the log, which is set to t=0.
        """
        parsed_events = []
        with open(log_path, 'r') as f:
            for line in f:
                log_entry = json.loads(line.strip())
                event_data = log_entry.get('event', {})
                
                if event_data.get('event_type') == 'perceived_word':
                    timestamp = log_entry.get('timestamp')
                    if timestamp is not None:
                        start_ms = event_data.get('start_ms', 0)
                        end_ms = event_data.get('end_ms', 0)
                        word = event_data.get('word', 'unknown')
                        duration_s = (end_ms - start_ms) / 1000.0
                        parsed_events.append({
                            'timestamp': timestamp,
                            'duration': duration_s,
                            'word': word
                        })

        if not parsed_events:
            return cls(intervals=[])

        first_timestamp = min(event['timestamp'] for event in parsed_events)

        intervals = []
        for event in parsed_events:
            t_start = event['timestamp'] - first_timestamp
            t_end = t_start + event['duration']
            intervals.append((t_start, t_end, event['word']))
        
        intervals.sort(key=lambda x: x[0])
        return cls(intervals=intervals)

    @classmethod
    def from_prt(cls, prt_path: Path) -> 'Protocol':
        """
        Construct a Protocol from a .prt file path.
        The .prt file format is expected to follow the BrainVoyager protocol format.
        """
        protocol_dict = cls._parse_prt(prt_path)
        return cls.from_dict(protocol_dict)

    @staticmethod
    def _parse_prt(prt_path: Path) -> Dict[str, List[Tuple[float, float]]]:
        """
        Parse a .prt file and return a dictionary mapping condition names to lists of (t_start, t_end) tuples.
        """
        with open(prt_path, 'r') as f:
            lines = [ln.rstrip() for ln in f if ln.strip()]

        # Skip ahead to the first block
        i = 0
        while i < len(lines) and not lines[i].startswith("NrOfConditions"):
            i += 1
        i += 1  # skip the NrOfConditions line

        protocol = {}
        while i < len(lines):
            cond_name = lines[i].strip()
            i += 1
            try:
                n_intervals = int(lines[i].strip())
            except ValueError:
                raise ValueError(f"Expected interval count after condition name '{cond_name}' at line {i+1}")
            i += 1

            intervals = []
            for _ in range(n_intervals):
                parts = lines[i].split()
                if len(parts) < 2:
                    raise ValueError(f"Malformed interval line at {i+1}: '{lines[i]}'")
                start, end = map(float, parts[:2])
                intervals.append((start, end))
                i += 1

            protocol[cond_name] = intervals

            # skip the Color line if present
            if i < len(lines) and lines[i].startswith("Color"):
                i += 1

        return protocol

    @classmethod
    def from_session_path(cls, session_path: Path) -> 'Protocol':
        """
        Search for a protocol file in the given session_path and construct a Protocol.
        Raises an error if the protocol is ambiguous (e.g., multiple files or types).
        """
        jsonl_files = list(session_path.glob('*.jsonl'))
        prt_files = list(session_path.glob('*.prt'))

        if jsonl_files and prt_files:
            raise ValueError(
                f"Ambiguous protocol: Found both .jsonl and .prt files in {session_path}. "
                "Please specify which one to use or remove the other."
            )

        if jsonl_files:
            if len(jsonl_files) > 1:
                raise ValueError(f"Multiple .jsonl files found in {session_path}: {jsonl_files}")
            return cls.from_perceived_speech_log(jsonl_files[0])

        if prt_files:
            if len(prt_files) > 1:
                raise ValueError(f"Multiple .prt files found in {session_path}: {prt_files}")
            return cls.from_prt(prt_files[0])
        
        raise FileNotFoundError(f"No protocol file (.jsonl or .prt) found in {session_path}")


def create_protocol(patient: str, experiment: str, session: str) -> Protocol:
    """
    Loads a Protocol object for a given patient, experiment, and session.
    Finds the protocol.prt file, checks it exists, and loads it.
    """
    path = _protocol_path(patient, experiment, session)
    check_file_exists(path)
    return Protocol.from_prt(Path(path))


def _protocol_path(patient: str, experiment: str, session: str) -> str:
    """
    Constructs the path to the protocol.prt file for a given patient, experiment, and session.
    """
    root = lys_data_dir()
    return os.path.join(root, patient, 'nirs', experiment, session, 'protocol.prt')

